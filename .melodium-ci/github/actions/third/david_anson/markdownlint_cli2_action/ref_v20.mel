use cicd/services/github::replicateContextsWithInputs
use cicd/services/github::runAction
use javascript::JavaScriptEngine
use log/logger::Logger
use std/data/string_map::StringMap
use std/data/string_map::|entry
use std/data/string_map::|map
use std/ops/option::|wrap

#[github_action(DavidAnson/markdownlint-cli2-action@v20)]
#[generated(true)]
treatment markdownlintCli2Action[contexts: JavaScriptEngine, logger: Logger](
        var config: string = "",
        var fix: string = "",
        var globs: string = "*.{md,markdown}",
        var separator: string = ${
}
)
  input trigger: Block<void>
  output completed: Block<void>
  output continue: Block<void>
  output failed: Block<void>
  model node_contexts: JavaScriptEngine()
{
    mainAction: runAction[contexts = node_contexts, logger = logger](
        commands = "node .melodium-ci/github/actions/third/david_anson/markdownlint_cli2_action/ref_v20/dist/index.mjs",
        env = |wrap<StringMap>(
        |map(
            [|entry(
                    "INPUT_CONFIG",
                    config
                    ),
                |entry(
                    "INPUT_FIX",
                    fix
                    ),
                |entry(
                    "INPUT_GLOBS",
                    globs
                    ),
                |entry(
                    "INPUT_SEPARATOR",
                    separator
                    )]
            )
        ),
        name = "markdownlintCli2Action"
    )
    replicateContextsWithInputs[action_contexts = node_contexts, main_contexts = contexts](
        inputs = |map(
        [|entry(
                "config",
                config
                ),
            |entry(
                "fix",
                fix
                ),
            |entry(
                "globs",
                globs
                ),
            |entry(
                "separator",
                separator
                )]
        )
    )

    Self.trigger -> replicateContextsWithInputs.trigger
    replicateContextsWithInputs.ready -> mainAction.trigger
    mainAction.completed -> Self.completed
    mainAction.failed -> Self.failed
    mainAction.continue -> Self.continue
}

