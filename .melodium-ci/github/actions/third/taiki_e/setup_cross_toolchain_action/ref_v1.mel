use cicd/services/github::replicateContextsWithInputs
use cicd/services/github::runAction
use javascript::JavaScriptEngine
use log/logger::Logger
use std/data/string_map::StringMap
use std/data/string_map::|entry
use std/data/string_map::|map
use std/ops/option::|wrap

#[generated(true)]
#[github_action(taiki-e/setup-cross-toolchain-action@v1)]
treatment setupCrossToolchainAction[contexts: JavaScriptEngine, logger: Logger](
        var qemu: string = "",
        var runner: string = "",
        var target: string = "",
        var wine: string = ""
)
  input trigger: Block<void>
  output completed: Block<void>
  output continue: Block<void>
  output failed: Block<void>
  model composite_contexts: JavaScriptEngine()
{
    replicateContextsWithInputs[action_contexts = composite_contexts, main_contexts = contexts](
        inputs = |map(
        [|entry(
                "target",
                target
                ),
            |entry(
                "runner",
                runner
                ),
            |entry(
                "qemu",
                qemu
                ),
            |entry(
                "wine",
                wine
                )]
        )
    )
    step0: runAction[contexts = composite_contexts, logger = logger](
        commands = "bash --noprofile --norc \"${GITHUB_ACTION_PATH:?}/main.sh\"",
        env = |wrap<StringMap>(
        |map(
            [|entry(
                    "INPUT_WINE",
                    "${{ inputs.wine }}"
                    ),
                |entry(
                    "INPUT_RUNNER",
                    "${{ inputs.runner }}"
                    ),
                |entry(
                    "INPUT_TARGET",
                    "${{ inputs.target }}"
                    ),
                |entry(
                    "INPUT_QEMU",
                    "${{ inputs.qemu }}"
                    )]
            )
        ),
        name = "step0",
        shell = "bash"
    )

    Self.trigger -> replicateContextsWithInputs.trigger
    replicateContextsWithInputs.ready -> step0.trigger
    step0.completed -> Self.completed
    step0.failed -> Self.failed
    step0.continue -> Self.continue
}

